@page "/"
<!--Подключение интерфейса заполнения таблицы-->
@inject IDataService data
<!--Подключение навигационного менеджера-->
@inject NavigationManager navigate
<!--Включение режима интерактивной визуализации -->
@rendermode InteractiveServer
<!--Подключение авторизации-->
@attribute [Authorize]

<PageTitle>Задачи</PageTitle>

<h1>Мои задачи</h1>

<!--Реализация контейнера таблицы-->
<div class="container">
    @if (tasks == null)
            {
            <!--Строка будет объединять 5 ячеек таблицы при выводе на страницу-->
                <tr>
                    <td> colspan = "5">Loading...</td>
                </tr>
            }
    else
    {
    <!--Реализация кнопки "Новая задача"-->
        <div class="btn-group m-2">
            <button class="btn-primary" @onclick="AddTask">Новая задача</button>
        </div>
    <!--Реализация заголовков и содержимого таблицы-->
        <div class="card-group">
            @foreach (var task in tasks)
            {
                <div class="card">
                    <div class="card-header">
                        @task.Title
                    </div>
                    <div class="card-body">
                        <p>@task.Description</p>
                        <p>@task.CreatedDate</p>
                    </div>
                    <div class="card-footer">
                        <a class="btn btn-primary" href="tasks/@task.Id">Изменить</a>
                        <button class="btn btn-primary" @onclick="async () => await DeleteTask(task.Id)">Удалить</button>
                    </div>
                </div>
            }
        </div>
    }
</div>


@code
{
    <!--Вызов интерфейса для заполнения данных таблицы-->
    IEnumerable<TaskItem>? tasks;

    <!--Переопределение асинхронного метода получения данных для сохранения данных в tasks-->
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        tasks = await data.GetAllAsync();
    }

    @*Метод добавления задачи*@
    void AddTask()
    {
        @*Перенаправление на страницу /tasks/add для создания задачи*@
        navigate.NavigateTo("/tasks/add");
    }

    @*Метод удаления задачи*@
    async Task DeleteTask(int id)
    {
        await data.DeleteAsync(id);
        tasks = await data.GetAllAsync();
    }
}
